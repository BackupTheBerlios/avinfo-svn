Russian documentation for AVInfo utitly. DOS-866 codepage, CRLF.


		A.S.S. tutorial

 A.S.S. - AVInfo simple script - интерпретируемый примитивный язык для
 создания шаблонов в программе AVInfo.

 Основная идеология программы:

 AVInfo после разбора параметров командной строки для каждого файла
 из списка (или единственного файла, если списка нет) вызывает  
 (базируясь на расширении) модуль, собирающий информацию о файле. 
 Каждый модуль делает это по-своему, но каждый из них в результате
 заполняет несколько внутренних переменных (см ниже), описывающих
 параметры файла.
 Если разбор произошёл успешно, вызывается парсер шаблона - 
 интерпретатор скрипта, содержащего команды вывода на экран параметров.

 Если обрабатывается список файла, то, в зависимости от настроек,
 может быть вызвана "шапка" (header) - шаблон, которой обрабатывается
 ДО обработки первого файла. Там, например, может находиться
 заголовок html файла и тег <body>, <table>, если предполагается воводить
 таблицу с описанием файлов в html.
 Аналогичным образом может быть вызван "хвост" (footer), шаблон,
 который выводится после обработки всех файлов списка. Обычно там
 находится статистика и/или закрывающие теги html.

 AVInfo определяет шаблон, который будет использован, в следующем
 порядке:

 1) Если какой-то из шаблонов (header, body, footer) указан 
 пользователем явно, то будет использоваться он.
 (ключи командной строки -th, -tb, -tf, -thf, -tbf, -tff)
 2) Если пользователь указал имя шаблона (например, --list)
 то используются шаблоны с соответствующим именем. (при этом,
 если пользователь, например, указал и имя шаблона, и "свой"
 хвост, то будет использоваться шапка и тело шаблона с соответствующим
 именем и хвост, указанный пользователем).
 3) Если имя шаблона не указано, то будет использоваться шаблон
 с именем --default.

 Указание собственных шаблонов. 

 Собственные шаблоны можно указывать как напрямую из командной
 строки, так и через файлы.

 Если шаблон указывается в командной строке, следует позаботиться
 о "маскировании" возможных служебных символов, во избежание
 неожиданных последствий (так, например, символ '>' в шаблонах
 AVInfo значит "больше", в то же самое время, в большинстве
 командных интерпретаторов этот символ означает перенаправление
 ввода-вывода).
 Если указывается имя файла с шаблоном, размер файла для каждого из
 шаблонов не должен превышать 64к.

 Указываются шаблоны следующим образом:

 При указании из командной строки:
 -th=header
 -tb=body
 -tf=footer

 При указании на файлы с шаблонами:
 -thf=header.file
 -tbf=body.file
 -tff=footer.file

 В случае необходимости можно указать "пустой" шаблон, т.е.
 вызывать AVInfo с шаблоном -tf без параметра. В этом случае
 будет использоваться либо стандартный шаблон, либо шаблон с указанным
 именем, но хвост шаблона вызываться не будет. 
 Если AVInfo не сумеет прочитать шаблон из файла, то будет использоваться
 или шаблон с указанным именем (если имя было указанно в командной
 строке) или дефолтовый шаблон (с именем --default).

 Стурктура шаблона

 Каждый шаблон представляет из себя ноль или более команд для встроенного
 интерпретатора.

 Команды по синтаксису несколько напоминают смесь C с BASIC, 
 и не предназначены для написания сложных программ.

 В большинстве своём шаблон вполне может быть написан с использованием
 двух-трёх переменных для счётчиков и нескольких циклов.

 Все команды в A.S.S. и имена переменны регистронезависимые.
 Строки обрабатываются без изменения регистра.

 Имена переменных.

 Имена переменных могут состоять из букв латинского алфавита, цифр
 и точки.
 (при этом цифра или точка не могут быть первым символом имени 
 переменной)

 Примеры имён:

 c - переменная с именем 'c'.
 class23.member2 - переменная с именем 'class23.member'


 Массивы.

 Ограниченно поддерживаются массивы. Если в имени переменной
 встречаются квадратные скобки [], то содержимое этих
 скобок трактуется как выражение (см ниже) и вычисляется.
 При этом в имя переменной попадает уже посчитанное значение.

 Так, например:

 v[2].l тождественно равно v2.l
 v[2+2<<4-4].cc тождественно равно v4.cc

 Внутри квадратных скобок можно использовать другие переменные.

 Так, например, если c=2, то v[c+1].l эквивалентно v3.l

 Типы переменных.

 Внутри AVInfo нет строгой типизации, другими словами, тип
 переменной меняется в зависимости от места использования.

 При этом выполняются определённые правила:

 1) Если место использования переменной требует
 числа, то в случае использования строковой переменной
 в качестве её числового значения используется длина строки.
 2) Если скадываются две строки, то результат - строка.
 Все остальные операции (вычитание, умножение, сравнение,
 etc) используют числовые значения.

 Длина строки ограничена лишь доступной памятью, числовые
 переменные ограничены диапазоном значений signed int32
 [-2147483648;2147483648]. Переполнение не контролируется.

 Выражения.

 Внутри AVInfo в определённых местах (внутри квадратных
 скобок, внутри условий ветвления и циклов, в операторе print)
 можно использовать выражения.

 Выражения считаются практически аналогично выражениям
 из C. Таблица приоритетов соответствует аналогичной таблице
 из C.

 Список доступных операций:
 -exp		изменение знака выражения
 (exp)		выражение. (Используется для изменения приоритетов)
 exp+exp	сложение чисел или строк. Если хотя бы одно из 
 			выражений число, результат число, иначе - строка.
 exp-exp    вычитание двух чисел
 exp*exp	умножение
 exp/exp    целочисленное деление. Результат деления на ноль 
 			- значение  первого выражения. 
 exp%exp    остаток целочисленного деления. Если второе выражение
 			равно нулю, результат равен первому выражению.

 exp=exp    сравнение численных выражений. Результат равен единице,
 			если выражения равны. Если оба выражения строки,
 			они сравниваются, без учёта регистра. Если выражения
 			не равны результат 0.

 exp!=exp   Аналогично предыдущему, но результат равен 1 если
 			выражения не равны.

 exp<exp	сравнение численных выражений. Результат равен единице,
 exp>exp    если выполняется условие (меньше, больше, больше или равно,
 exp>=exp   меньше или равно). В противоположном случае результат 0.
 exp<=exp 

 exp>>exp   сдвиг вправо.
 exp<<exp 	сдвиг влево.

 !exp		инвертирует численное выражение. Результат равен 0,
 			если выражение не равно нулю (в т.ч. меньше нуля).
 			результат равен 1, если выражение равно 0.

 exp&exp    операции побитного "И"
 exp|exp    "ИЛИ"

 exp&&exp   операции бинарного "И"
 exp||exp   "ИЛИ"


 Отдельно надо сказать об операциях пост- и пре- инкремента.
 Они примернимы только к переменным (не к выражениям). В отличие от C,
 они вычисляются строго в порядке следования в тексте выражения.

 (Другими словами если a=1, то b=a++ + ++a, то b=4)

 Команды A.S.S.

 Существуют следующие команды

 {команда;команда;...команда;} - фигурные скобки используются для группировки
 команд. Могут быть пустыми - т.е. не содержать команд.

 exit; - эта команда завершает выполнение скрипта.

 if(выражение) команда1; else команда2; Если выражение истино (не равно нулю),
 то выполняется команда1, иначе команда 2.

 while(выражение) команда; команда выполняется до тех пор, пока выражение истино.
 Цикл с предусловием, т.е. если с самого начала выражение равно нулю, то команда
 не будет выполнена ни разу.
 do комадна; while (выражение) команда выполняется до тех пор, пока выражение
 истино. Цикл с постусловием, т.е. если выражение ложно, то команда выполнится
 хотя бы один раз.
 print выражение1:выражение2, выражение1:выражение2,...,выражение; 
 Команда выводит на экран выражение 2 с учётом режима, заданного выражением1.
 (см ниже). Выражение1 может отсутствовать (вместе с двоеточием), 
 в этом случае выводится значение выражения в "дефолтовой" форме.


